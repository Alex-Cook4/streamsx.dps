#!/bin/bash 
# Add -x to the line above to display the status of the statements below as they get executed.
#
# In order for this to work, you must ensure that these two Linux environment
# variables are set correctly:  $STREAMS_INSTALL and $JAVA_HOME
#
# This script will attempt to build the DPS Java Lib loader library which will
# contain simply one JNI function to load many of the .so libraries inside the
# DpsHelper Java file (This is needed for using DPS inside Java operators)
#
# It will also build the main DPS library that contains the actual DPS logic to
# perform CRUD operations into 10 or so back-end K/V stores.
#
echo "============================================================================="
date
echo "Building the DistributedProcessStore shared library now."
echo "(It may take about a minute to complete.)"
echo ""
# Define the following for building the DPS shared library.
CPP_BUILD_TARGET="DistributedProcessStore"
CPP_JNI_TARGET="com_ibm_streamsx_dps_impl_DpsHelper"
CPP_MEMCACHED_TARGET="MemcachedDBLayer"
CPP_REDIS_TARGET="RedisDBLayer"
CPP_CASSANDRA_TARGET="CassandraDBLayer"
CPP_CLOUDANT_TARGET="CloudantDBLayer"
CPP_HBASE_TARGET="HBaseDBLayer"
CPP_MONGO_TARGET="MongoDBLayer"
CPP_COUCHBASE_TARGET="CouchbaseDBLayer"
CPP_AEROSPIKE_TARGET="AerospikeDBLayer"
CPP_REDIS_CLUSTER_TARGET="RedisClusterDBLayer"
FINAL_LIB_NAME="DistributedProcessStoreLib"

# Define these two for building the DPS Java Lib Loader library
CPP_DPS_JAVA_LIB_LOADER_JNI_TARGET="com_ibm_streamsx_dps_JavaLibLoader"
FINAL_JAVA_LIB_LOADER_LIB_NAME="DpsJavaLibLoader"

CXX=g++
PLATFORM=`uname -i`

if [ "$PLATFORM" == "ppc64" ];
then
   CXX=/opt/at5.0/bin/g++
fi

# Determine the processor architecture type, OS type and OS major version (e-g: x86_64 and RHEL6).
# Based on that, create a sub-directory inside impl/lib (e-g: impl/lib/x86_64.RHEL6)
if [ -f /etc/redhat-release ] ; then
 OSDIST=`awk 'FNR == 1 {print substr($1, 0)}' /etc/redhat-release`
 if [ "$OSDIST" == 'Red' ]; then
    OSDIST='RHEL'
 fi

 OSVER=`cat /etc/redhat-release | sed s/.*release\ // | sed s/\ .*//`
 OSLVL="$OSDIST${OSVER%%.*}"
elif [ -f /etc/SuSE-release ] ; then
 OSVER=`awk 'FNR == 2 {print $3}' /etc/SuSE-release`
 OSLVL=SLES${OSVER}
else
  OSLVL="unsupported Linux distribution"
fi

if [ ! -d "./lib/$PLATFORM.$OSLVL" ]; then
   mkdir ./lib/$PLATFORM.$OSLVL
fi

SPL_PKGCFG=$STREAMS_INSTALL/bin/dst-pe-pkg-config.sh
SPL_PKG=dst-spl-pe-install
SPL_COMPILE_OPTIONS=`$SPL_PKGCFG --cflags $SPL_PKG`
SPL_LINK_OPTIONS=`$SPL_PKGCFG --libs $SPL_PKG`
# Add a relative (NOT an absolute) path to the location of the third party libraries (libmemcached.so, libhiredis.so etc.) that
# will be loaded by our dps .so library (libDistributedProcessStoreLib.so) being built below.
# In our case, our dps library and the libmemcached + libhiredis + libcassandra + libcurl + libjson + libcouchbase + libaerospike libraries are placed inside the same directory (e-g: impl/lib/x86_64.RHEL6)
# Hence, we can simply store rpath as $ORIGIN.
DPS_SHARED_OBJECT_LIB_DIR=-Wl,-rpath,'$ORIGIN'

# Export this environment variable so that gcc will find our local copy of the 
# libmemcached include files stored in the ./libmemcached-1.0 sub-directory of our
# project's C++ source directory. In addition, provide the JNI include directories.
export CPLUS_INCLUDE_PATH=./include:$JAVA_HOME/include:$JAVA_HOME/include/linux

$CXX -O3 -Wall -c -fmessage-length=0 -fPIC -D_REENTRANT -I include $SPL_COMPILE_OPTIONS src/$CPP_BUILD_TARGET.cpp
$CXX -O3 -Wall -c -fmessage-length=0 -fPIC -D_REENTRANT -I include $SPL_COMPILE_OPTIONS src/$CPP_JNI_TARGET.cpp
$CXX -O3 -Wall -c -fmessage-length=0 -fPIC -D_REENTRANT -I include $SPL_COMPILE_OPTIONS src/$CPP_MEMCACHED_TARGET.cpp
$CXX -O3 -Wall -c -fmessage-length=0 -fPIC -D_REENTRANT -I include $SPL_COMPILE_OPTIONS src/$CPP_REDIS_TARGET.cpp
$CXX -O3 -Wall -c -fmessage-length=0 -fPIC -D_REENTRANT -I include $SPL_COMPILE_OPTIONS src/$CPP_CASSANDRA_TARGET.cpp
$CXX -O3 -Wall -c -fmessage-length=0 -fPIC -D_REENTRANT -I include $SPL_COMPILE_OPTIONS src/$CPP_CLOUDANT_TARGET.cpp
$CXX -O3 -Wall -c -fmessage-length=0 -fPIC -D_REENTRANT -I include $SPL_COMPILE_OPTIONS src/$CPP_HBASE_TARGET.cpp
$CXX -O3 -Wall -c -fmessage-length=0 -fPIC -D_REENTRANT -I include $SPL_COMPILE_OPTIONS src/$CPP_MONGO_TARGET.cpp
$CXX -O3 -Wall -c -fmessage-length=0 -fPIC -D_REENTRANT -I include $SPL_COMPILE_OPTIONS src/$CPP_COUCHBASE_TARGET.cpp
$CXX -O3 -Wall -c -fmessage-length=0 -fPIC -D_REENTRANT -I include $SPL_COMPILE_OPTIONS src/$CPP_AEROSPIKE_TARGET.cpp
$CXX -O3 -Wall -c -fmessage-length=0 -fPIC -D_REENTRANT -I include $SPL_COMPILE_OPTIONS src/$CPP_REDIS_CLUSTER_TARGET.cpp
$CXX -shared -o lib$FINAL_LIB_NAME.so $DPS_SHARED_OBJECT_LIB_DIR $SPL_LINK_OPTIONS $CPP_BUILD_TARGET.o $CPP_JNI_TARGET.o $CPP_MEMCACHED_TARGET.o $CPP_REDIS_TARGET.o $CPP_CASSANDRA_TARGET.o $CPP_CLOUDANT_TARGET.o $CPP_HBASE_TARGET.o $CPP_MONGO_TARGET.o $CPP_COUCHBASE_TARGET.o $CPP_AEROSPIKE_TARGET.o $CPP_REDIS_CLUSTER_TARGET.o

rm -f $CPP_BUILD_TARGET.o $CPP_JNI_TARGET.o $CPP_MEMCACHED_TARGET.o $CPP_REDIS_TARGET.o $CPP_CASSANDRA_TARGET.o $CPP_CLOUDANT_TARGET.o $CPP_HBASE_TARGET.o $CPP_MONGO_TARGET.o $CPP_COUCHBASE_TARGET.o $CPP_AEROSPIKE_TARGET.o $CPP_REDIS_CLUSTER_TARGET.o

# Build the Java Lib Loader shared library now.
# This library is being created starting from DPS version 1.0.9 (Apr/2015)
# When the redis-cluster option was added in this release, previous way of loading the
# libDistributedProcessStore.so inside the DpsHelper.java started failing due to the
# dependency on hiredis.so because of a new static function in the hirediscommand.h file.
# To avoid that error, we are building a new Java lib loader shared library that will just
# have a single C++ method to load the many other dependent .so libraries.
$CXX -O3 -Wall -c -fmessage-length=0 -fPIC -D_REENTRANT -I include $SPL_COMPILE_OPTIONS src/$CPP_DPS_JAVA_LIB_LOADER_JNI_TARGET.cpp
$CXX -shared -o lib$FINAL_JAVA_LIB_LOADER_LIB_NAME.so $DPS_SHARED_OBJECT_LIB_DIR $SPL_LINK_OPTIONS $CPP_DPS_JAVA_LIB_LOADER_JNI_TARGET.o

rm -f $CPP_DPS_JAVA_LIB_LOADER_JNI_TARGET.o

echo ""

if [ -f lib$FINAL_LIB_NAME.so ]; then
   rm -f ./lib/$PLATFORM.$OSLVL/lib$FINAL_LIB_NAME.so
   mv lib$FINAL_LIB_NAME.so ./lib/$PLATFORM.$OSLVL
   mv lib$FINAL_JAVA_LIB_LOADER_LIB_NAME.so ./lib/$PLATFORM.$OSLVL
   echo "A new .so file is now available in the ./lib/$PLATFORM.$OSLVL directory."
else
   echo "There were errors while building the DistributedProcessStore shared library."
fi

date
echo "============================================================================="
