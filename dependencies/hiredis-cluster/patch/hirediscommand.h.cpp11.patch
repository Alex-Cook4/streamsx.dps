--- cpp-hiredis-cluster-master.orig/include/hirediscommand.h	2015-07-12 15:27:26.000000000 -0400
+++ cpp-hiredis-cluster-master/include/hirediscommand.h	2015-10-02 15:51:57.109481792 -0400
@@ -41,10 +41,8 @@
 namespace RedisCluster
 {
     using std::string;
-    template < typename Cluster = Cluster<redisContext> >
     class HiredisCommand : public NonCopyable
     {
-        typedef redisContext Connection;
         enum CommandType
         {
             SDS,
@@ -56,28 +54,28 @@
         static typename Cluster::ptr_t createCluster(const char* host,
                                                           int port,
                                                           void* data = NULL,
-                                                          typename Cluster::pt2RedisConnectFunc conn = connectFunction,
-                                                          typename Cluster::pt2RedisFreeFunc free = freeFunction,
-                                                          const struct timeval &timeout = { 3, 0 } )
+                                                          Cluster::pt2RedisConnectFunc conn = connectFunction,
+                                                          Cluster::pt2RedisFreeFunc free = freeFunction )
         {
-            typename Cluster::ptr_t cluster(NULL);
+            Cluster<redisContext>::ptr_t cluster(NULL);
             redisReply *reply;
+            const struct timeval &timeout = { 3, 0 };
             
             redisContext *con = redisConnectWithTimeout( host, port, timeout );
             if( con == NULL || con->err )
                 throw ConnectionFailedException();
             
-            reply = static_cast<redisReply*>( redisCommand( con, Cluster::CmdInit() ) );
+            reply = static_cast<redisReply*>( redisCommand( con, Cluster<redisContext>::CmdInit() ) );
             HiredisProcess::checkCritical( reply, true );
 
-            cluster = new Cluster( reply, conn, free, data );
+            cluster = new Cluster<redisContext>( reply, conn, free, data );
             
             freeReplyObject( reply );
             redisFree( con );
             return cluster;
         }
         
-        static inline void* Command( typename Cluster::ptr_t cluster_p,
+        static inline void* Command( typename Cluster<redisContext>::ptr_t cluster_p,
                                    string key,
                                    int argc,
                                    const char ** argv,
@@ -86,7 +84,7 @@
             return HiredisCommand( cluster_p, key, argc, argv, argvlen ).process();
         }
         
-        static inline void* Command( typename Cluster::ptr_t cluster_p,
+        static inline void* Command( typename Cluster<redisContext>::ptr_t cluster_p,
                                    string key,
                                    const char *format, ...)
         {
@@ -96,7 +94,7 @@
             va_end(ap);
         }
         
-        static inline void* Command( typename Cluster::ptr_t cluster_p,
+        static inline void* Command( typename Cluster<redisContext>::ptr_t cluster_p,
                                     string key,
                                     const char *format, va_list ap)
         {
@@ -105,7 +103,7 @@
         
     protected:
         
-        HiredisCommand( typename Cluster::ptr_t cluster_p,
+        HiredisCommand( typename Cluster<redisContext>::ptr_t cluster_p,
                        string key,
                        int argc,
                        const char ** argv,
@@ -120,7 +118,7 @@
             len_ = redisFormatSdsCommandArgv(&cmd_, argc, argv, argvlen);
         }
         
-        HiredisCommand( typename Cluster::ptr_t cluster_p,
+        HiredisCommand( typename Cluster<redisContext>::ptr_t cluster_p,
                        string key,
                        const char *format, va_list ap ) :
         cluster_p_( cluster_p ),
@@ -145,7 +143,7 @@
             }
         }
         
-        redisReply* processHiredisCommand( Connection *con )
+        redisReply* processHiredisCommand( redisContext *con )
         {
             redisReply* reply;
             redisAppendFormattedCommand( con, cmd_, len_ );
@@ -153,7 +151,7 @@
             return reply;
         }
         
-        redisReply* asking( Connection *con  )
+        redisReply* asking( redisContext *con  )
         {
             return static_cast<redisReply*>( redisCommand( con, "ASKING" ) );
         }
@@ -161,8 +159,8 @@
         void* process()
         {
             redisReply *reply;
-            typename Cluster::SlotConnection con = cluster_p_->getConnection( key_ );
-            typename Cluster::HostConnection hcon = { "", NULL };
+            Cluster<redisContext>::SlotConnection con = cluster_p_->getConnection( key_ );
+            Cluster<redisContext>::HostConnection hcon = { "", NULL };
             string host, port;
             
             reply = processHiredisCommand( con.second );
@@ -230,7 +228,7 @@
             return reply;
         }
         
-        static Connection* connectFunction( const char* host, int port, void * )
+        static redisContext* connectFunction( const char* host, int port, void * )
         {
             return redisConnect( host, port);
         }
@@ -240,7 +238,7 @@
             redisFree( con );
         }
         
-        typename Cluster::ptr_t cluster_p_;
+        Cluster<redisContext>::ptr_t cluster_p_;
         string key_;
         char *cmd_;
         int len_;
