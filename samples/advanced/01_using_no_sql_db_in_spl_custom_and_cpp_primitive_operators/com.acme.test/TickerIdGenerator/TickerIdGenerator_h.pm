
package TickerIdGenerator_h;
use strict; use Cwd 'realpath';  use File::Basename;  use lib dirname(__FILE__);  use SPL::Operator::Instance::OperatorInstance; use SPL::Operator::Instance::Annotation; use SPL::Operator::Instance::Context; use SPL::Operator::Instance::Expression; use SPL::Operator::Instance::ExpressionTree; use SPL::Operator::Instance::ExpressionTreeEvaluator; use SPL::Operator::Instance::ExpressionTreeVisitor; use SPL::Operator::Instance::ExpressionTreeCppGenVisitor; use SPL::Operator::Instance::InputAttribute; use SPL::Operator::Instance::InputPort; use SPL::Operator::Instance::OutputAttribute; use SPL::Operator::Instance::OutputPort; use SPL::Operator::Instance::Parameter; use SPL::Operator::Instance::StateVariable; use SPL::Operator::Instance::TupleValue; use SPL::Operator::Instance::Window; 
sub main::generate($$) {
   my ($xml, $signature) = @_;  
   print "// $$signature\n";
   my $model = SPL::Operator::Instance::OperatorInstance->new($$xml);
   unshift @INC, dirname ($model->getContext()->getOperatorDirectory()) . "/../impl/nl/include";
   $SPL::CodeGenHelper::verboseMode = $model->getContext()->isVerboseModeOn();
   print '/*', "\n";
   print '=================================================================================================', "\n";
   print '**** TIPS ABOUT CALLING THE dps APIs FROM INSIDE THE USER-WRITTEN NATIVE FUNCTIONS ****', "\n";
   print "\n";
   print 'This is how we can access the native functions within a C++ primitive operator.', "\n";
   print 'In this example, our goal is to use the dps native function APIs directly', "\n";
   print 'inside the C++ primitive operator.', "\n";
   print "\n";
   print '1) Refer to the ../../impl/bin/archLevel file that we created in this example directory.', "\n";
   print '(A common practice is to copy an existing archLevel file and modify it to suit your project\'s needs.)', "\n";
   print 'In that file, search for com.ibm.streamsx.dps and you will see in two different places where we', "\n";
   print 'have set the path to point to the impl/lib and impl/include directories belonging to the', "\n";
   print 'dps toolkit present in your $STREAMS_INSTALL directory. ', "\n";
   print "\n";
   print '2) In this C++ operator\'s  model XML file, the archLevel file referred to above is being used to', "\n";
   print '   automatically add the DPS include  directory and the required  K/V store third party libraries in', "\n";
   print '   the operator model XML file. That XML file is located in this ', "\n";
   print '   <Project_Directory>/com.acme.test/TickerIdGenerator/TickerIdGenerator.xml.', "\n";
   print "\n";
   print '3) We have to include the dps wrapper include file in this native function include file.', "\n";
   print '   [See the first non-commented line below this comment block.]', "\n";
   print "\n";
   print '4) Finally, we will add "using namespace" of the C++ implementation for the', "\n";
   print 'dps into this C++ operator\'s scope. That will allow us to use any of the', "\n";
   print 'dps\'s public member functions within this C++ operator code.', "\n";
   print "\n";
   print 'That is it. Now, you can call any of the dps native function APIs inside this', "\n";
   print 'C++ primitive operator.', "\n";
   print '=================================================================================================', "\n";
   print '*/', "\n";
   print "\n";
   print '/* Additional includes go here */', "\n";
   print '#include "DistributedProcessStoreWrappers.h"', "\n";
   print 'using namespace com::ibm::streamsx::store::distributed;', "\n";
   print 'using namespace std;', "\n";
   print "\n";
   SPL::CodeGen::headerPrologue($model);
   print "\n";
   print "\n";
   print 'class MY_OPERATOR : public MY_BASE_OPERATOR ', "\n";
   print '{', "\n";
   print 'public:', "\n";
   print '  // Constructor', "\n";
   print '  MY_OPERATOR();', "\n";
   print "\n";
   print '  // Destructor', "\n";
   print '  virtual ~MY_OPERATOR(); ', "\n";
   print "\n";
   print '  // Notify port readiness', "\n";
   print '  void allPortsReady(); ', "\n";
   print "\n";
   print '  // Notify pending shutdown', "\n";
   print '  void prepareToShutdown(); ', "\n";
   print "\n";
   print '  // Processing for source and threaded operators   ', "\n";
   print '  void process(uint32_t idx);', "\n";
   print '    ', "\n";
   print '  // Tuple processing for mutating ports ', "\n";
   print '  void process(Tuple & tuple, uint32_t port);', "\n";
   print '    ', "\n";
   print '  // Tuple processing for non-mutating ports', "\n";
   print '  void process(Tuple const & tuple, uint32_t port);', "\n";
   print "\n";
   print '  // Punctuation processing', "\n";
   print '  void process(Punctuation const & punct, uint32_t port);', "\n";
   print 'private:', "\n";
   print '  // Members', "\n";
   print '}; ', "\n";
   print "\n";
   SPL::CodeGen::headerEpilogue($model);
   print "\n";
   print "\n";
   CORE::exit $SPL::CodeGen::USER_ERROR if ($SPL::CodeGen::sawError);
}
1;
